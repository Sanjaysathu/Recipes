{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","style","width","margin","background","borderRadius","textAlign","Math","floor","map","ingredient","display","justifyContent","src","height","alt","App","useState","search","setsearch","query","setQuery","recipes","setRecipes","useEffect","getrecipe","a","fetch","response","json","data","hits","console","log","type","onChange","e","target","value","padding","onClick","cursor","recipe","label","ingredientLines","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAoBeA,G,MAlBA,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,SAASC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,YAClC,OACI,yBAAKC,UAAU,SAASC,MAAO,CAACC,MAAM,OAAOC,OAAO,WAAWC,WAAW,QAAQC,aAAa,SAC3F,wBAAIJ,MAAO,CAACK,UAAU,WAAaV,GACnC,uBAAGK,MAAO,CAACK,UAAU,WAArB,cAA4CC,KAAKC,MAAMX,IACvD,4BACKE,EAAYU,KAAI,SAAAC,GAAU,OAEvB,4BAAKA,OAGb,yBAAKT,MAAO,CAACU,QAAQ,OAAOC,eAAe,WAC3C,yBAAKC,IAAKf,EAAOG,MAAO,CAACC,MAAM,QAAQY,OAAO,SAAUC,IAAI,SCsCzDC,MAhDf,WAEE,IAFa,EAKcC,mBAAS,IALvB,mBAKNC,EALM,KAKCC,EALD,OAMYF,mBAAS,WANrB,mBAMNG,EANM,KAMAC,EANA,OAOgBJ,mBAAS,IAPzB,mBAONK,EAPM,KAOEC,EAPF,KAiBbC,qBAAU,WAAOC,MAAc,CAACL,IAEhC,IAAMK,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCP,EAApC,mBAlBf,WAkBe,oBAjBd,qCAgBE,cACVQ,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBP,EAAWO,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJD,2CAAH,qDAQf,OACE,6BACE,yBAAK/B,UAAU,UACb,2BAAOkC,KAAK,OAAOC,SArBR,SAACC,GAChBjB,EAAUiB,EAAEC,OAAOC,QAoBwBA,MAAOpB,EAAQjB,MAAO,CAACsC,QAAQ,cACtE,4BAAQC,QAlBG,WACfnB,EAASH,IAiBsBjB,MAAO,CAACsC,QAAQ,WAAWE,OAAO,YAA7D,WAEF,yBAAKzC,UAAU,WACbsB,EAAQb,KAAI,SAAAiC,GAAM,OAClB,kBAAC,EAAD,CACG9C,MAAO8C,EAAOA,OAAOC,MACrB9C,SAAU6C,EAAOA,OAAO7C,SACxBC,MAAO4C,EAAOA,OAAO5C,MACrBC,YAAa2C,EAAOA,OAAOE,wBC/BlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7f0fe50e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = ({title,calories,image,ingredients}) =>{\r\n    return(\r\n        <div className=\"recipe\" style={{width:'40vw',margin:'20px 0px',background:'white',borderRadius:'20px'}}>\r\n            <h1 style={{textAlign:'center'}} >{title}</h1>\r\n            <p style={{textAlign:'center'}}>Calories : {Math.floor(calories)}</p>\r\n            <ol>\r\n                {ingredients.map(ingredient =>\r\n                (\r\n                    <li>{ingredient}</li>\r\n                ))}\r\n            </ol>\r\n            <div style={{display:'flex',justifyContent:'center'}}>\r\n            <img src={image} style={{width:'200px',height:'200px'}} alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nfunction App() {\n\n  const APP_ID = '8f8dfe66';\n  const APP_KEY = '2e8f2bd6ad44c2e51ba4c0a689db255c';\n\n  const [search,setsearch] = useState('');\n  const [query,setQuery] = useState('chicken');\n  const [recipes,setRecipes] = useState([]);\n\n  const onchange = (e) =>{\n    setsearch(e.target.value);\n  }\n\n  const onsubmit = () =>{\n    setQuery(search);\n  }\n\n  useEffect(() => {getrecipe();},[query])\n\n  const getrecipe = async () =>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits); \n  }\n \n\n  return(\n    <div>\n      <nav className=\"navbar\">\n        <input type=\"text\" onChange={onchange} value={search} style={{padding:'5px 10px'}} />\n        <button onClick={onsubmit} style={{padding:'5px 10px',cursor:'pointer'}} >Search</button>\n      </nav>\n      <div className=\"recipes\">\n       {recipes.map(recipe => (\n        <Recipe\n           title={recipe.recipe.label}\n           calories={recipe.recipe.calories}\n           image={recipe.recipe.image}\n           ingredients={recipe.recipe.ingredientLines}\n        />\n        ))}  \n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}